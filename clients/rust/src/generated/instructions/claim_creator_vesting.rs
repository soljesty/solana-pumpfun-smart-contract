//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!


#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct ClaimCreatorVesting {
      
              
          pub creator: solana_program::pubkey::Pubkey,
          
              
          pub creator_vault: solana_program::pubkey::Pubkey,
          
              
          pub creator_vault_token_account: solana_program::pubkey::Pubkey,
          
              
          pub bonding_curve: solana_program::pubkey::Pubkey,
          
              
          pub user_token_account: solana_program::pubkey::Pubkey,
          
              
          pub global: solana_program::pubkey::Pubkey,
          
              
          pub mint: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub clock: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl ClaimCreatorVesting {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.creator,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.creator_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.creator_vault_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.bonding_curve,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = ClaimCreatorVestingInstructionData::new().try_to_vec().unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::PUMP_SCIENCE_ID,
      accounts,
      data,
    }
  }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct ClaimCreatorVestingInstructionData {
            discriminator: [u8; 8],
      }

impl ClaimCreatorVestingInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [151, 131, 142, 112, 207, 122, 174, 223],
                  }
  }
}



/// Instruction builder for `ClaimCreatorVesting`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` creator
                ///   1. `[writable]` creator_vault
                ///   2. `[writable]` creator_vault_token_account
          ///   3. `[]` bonding_curve
                ///   4. `[writable]` user_token_account
          ///   5. `[]` global
          ///   6. `[]` mint
                ///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   8. `[]` clock
                ///   9. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
          ///   10. `[]` associated_token_program
                ///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   12. `[]` event_authority
          ///   13. `[]` program
#[derive(Default)]
pub struct ClaimCreatorVestingBuilder {
            creator: Option<solana_program::pubkey::Pubkey>,
                creator_vault: Option<solana_program::pubkey::Pubkey>,
                creator_vault_token_account: Option<solana_program::pubkey::Pubkey>,
                bonding_curve: Option<solana_program::pubkey::Pubkey>,
                user_token_account: Option<solana_program::pubkey::Pubkey>,
                global: Option<solana_program::pubkey::Pubkey>,
                mint: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                clock: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ClaimCreatorVestingBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn creator(&mut self, creator: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.creator = Some(creator);
                    self
    }
            #[inline(always)]
    pub fn creator_vault(&mut self, creator_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.creator_vault = Some(creator_vault);
                    self
    }
            #[inline(always)]
    pub fn creator_vault_token_account(&mut self, creator_vault_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.creator_vault_token_account = Some(creator_vault_token_account);
                    self
    }
            #[inline(always)]
    pub fn bonding_curve(&mut self, bonding_curve: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.bonding_curve = Some(bonding_curve);
                    self
    }
            #[inline(always)]
    pub fn user_token_account(&mut self, user_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_token_account = Some(user_token_account);
                    self
    }
            #[inline(always)]
    pub fn global(&mut self, global: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.global = Some(global);
                    self
    }
            #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint = Some(mint);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.clock = Some(clock);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
            /// Add an aditional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = ClaimCreatorVesting {
                              creator: self.creator.expect("creator is not set"),
                                        creator_vault: self.creator_vault.expect("creator_vault is not set"),
                                        creator_vault_token_account: self.creator_vault_token_account.expect("creator_vault_token_account is not set"),
                                        bonding_curve: self.bonding_curve.expect("bonding_curve is not set"),
                                        user_token_account: self.user_token_account.expect("user_token_account is not set"),
                                        global: self.global.expect("global is not set"),
                                        mint: self.mint.expect("mint is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        clock: self.clock.expect("clock is not set"),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                                        associated_token_program: self.associated_token_program.expect("associated_token_program is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `claim_creator_vesting` CPI accounts.
  pub struct ClaimCreatorVestingCpiAccounts<'a, 'b> {
          
                    
              pub creator: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub creator_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub creator_vault_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub global: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub clock: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `claim_creator_vesting` CPI instruction.
pub struct ClaimCreatorVestingCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub creator: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub creator_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub creator_vault_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub global: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub clock: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> ClaimCreatorVestingCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: ClaimCreatorVestingCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              creator: accounts.creator,
              creator_vault: accounts.creator_vault,
              creator_vault_token_account: accounts.creator_vault_token_account,
              bonding_curve: accounts.bonding_curve,
              user_token_account: accounts.user_token_account,
              global: accounts.global,
              mint: accounts.mint,
              system_program: accounts.system_program,
              clock: accounts.clock,
              rent: accounts.rent,
              associated_token_program: accounts.associated_token_program,
              token_program: accounts.token_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.creator.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.creator_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.creator_vault_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.bonding_curve.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = ClaimCreatorVestingInstructionData::new().try_to_vec().unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::PUMP_SCIENCE_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(14 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.creator.clone());
                        account_infos.push(self.creator_vault.clone());
                        account_infos.push(self.creator_vault_token_account.clone());
                        account_infos.push(self.bonding_curve.clone());
                        account_infos.push(self.user_token_account.clone());
                        account_infos.push(self.global.clone());
                        account_infos.push(self.mint.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.clock.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ClaimCreatorVesting` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` creator
                ///   1. `[writable]` creator_vault
                ///   2. `[writable]` creator_vault_token_account
          ///   3. `[]` bonding_curve
                ///   4. `[writable]` user_token_account
          ///   5. `[]` global
          ///   6. `[]` mint
          ///   7. `[]` system_program
          ///   8. `[]` clock
          ///   9. `[]` rent
          ///   10. `[]` associated_token_program
          ///   11. `[]` token_program
          ///   12. `[]` event_authority
          ///   13. `[]` program
pub struct ClaimCreatorVestingCpiBuilder<'a, 'b> {
  instruction: Box<ClaimCreatorVestingCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimCreatorVestingCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ClaimCreatorVestingCpiBuilderInstruction {
      __program: program,
              creator: None,
              creator_vault: None,
              creator_vault_token_account: None,
              bonding_curve: None,
              user_token_account: None,
              global: None,
              mint: None,
              system_program: None,
              clock: None,
              rent: None,
              associated_token_program: None,
              token_program: None,
              event_authority: None,
              program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator = Some(creator);
                    self
    }
      #[inline(always)]
    pub fn creator_vault(&mut self, creator_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator_vault = Some(creator_vault);
                    self
    }
      #[inline(always)]
    pub fn creator_vault_token_account(&mut self, creator_vault_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator_vault_token_account = Some(creator_vault_token_account);
                    self
    }
      #[inline(always)]
    pub fn bonding_curve(&mut self, bonding_curve: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.bonding_curve = Some(bonding_curve);
                    self
    }
      #[inline(always)]
    pub fn user_token_account(&mut self, user_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_token_account = Some(user_token_account);
                    self
    }
      #[inline(always)]
    pub fn global(&mut self, global: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global = Some(global);
                    self
    }
      #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint = Some(mint);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.clock = Some(clock);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = ClaimCreatorVestingCpi {
        __program: self.instruction.__program,
                  
          creator: self.instruction.creator.expect("creator is not set"),
                  
          creator_vault: self.instruction.creator_vault.expect("creator_vault is not set"),
                  
          creator_vault_token_account: self.instruction.creator_vault_token_account.expect("creator_vault_token_account is not set"),
                  
          bonding_curve: self.instruction.bonding_curve.expect("bonding_curve is not set"),
                  
          user_token_account: self.instruction.user_token_account.expect("user_token_account is not set"),
                  
          global: self.instruction.global.expect("global is not set"),
                  
          mint: self.instruction.mint.expect("mint is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          clock: self.instruction.clock.expect("clock is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

struct ClaimCreatorVestingCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            creator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                creator_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                creator_vault_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                bonding_curve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                global: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

