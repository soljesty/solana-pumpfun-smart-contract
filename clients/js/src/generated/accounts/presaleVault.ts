/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, publicKey as publicKeySerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type PresaleVault = Account<PresaleVaultAccountData>;

  export type PresaleVaultAccountData = { discriminator: Array<number>; initialVestedSupply: bigint;  };

export type PresaleVaultAccountDataArgs = { initialVestedSupply: number | bigint;  };


  export function getPresaleVaultAccountDataSerializer(): Serializer<PresaleVaultAccountDataArgs, PresaleVaultAccountData> {
  return mapSerializer<PresaleVaultAccountDataArgs, any, PresaleVaultAccountData>(struct<PresaleVaultAccountData>([['discriminator', array(u8(), { size: 8 })], ['initialVestedSupply', u64()]], { description: 'PresaleVaultAccountData' }), (value) => ({ ...value, discriminator: [102, 155, 208, 196, 54, 144, 19, 203] }) ) as Serializer<PresaleVaultAccountDataArgs, PresaleVaultAccountData>;
}


export function deserializePresaleVault(rawAccount: RpcAccount): PresaleVault {
  return deserializeAccount(rawAccount, getPresaleVaultAccountDataSerializer());
}

export async function fetchPresaleVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PresaleVault> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'PresaleVault');
  return deserializePresaleVault(maybeAccount);
}

export async function safeFetchPresaleVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PresaleVault | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializePresaleVault(maybeAccount)
    : null;
}

export async function fetchAllPresaleVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PresaleVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PresaleVault');
    return deserializePresaleVault(maybeAccount);
  });
}

export async function safeFetchAllPresaleVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PresaleVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePresaleVault(maybeAccount as RpcAccount));
}

export function getPresaleVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'initialVestedSupply': number | bigint }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'initialVestedSupply': [8, u64()] })
    .deserializeUsing<PresaleVault>((account) => deserializePresaleVault(account))      .whereField('discriminator', [102, 155, 208, 196, 54, 144, 19, 203])
    ;
}

export function getPresaleVaultSize(): number {
  return 16;
}

export function findPresaleVaultPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("presale-vault"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchPresaleVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPresaleVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PresaleVault> {
  return fetchPresaleVault(context, findPresaleVaultPda(context, seeds), options);
}

export async function safeFetchPresaleVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPresaleVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PresaleVault | null> {
  return safeFetchPresaleVault(context, findPresaleVaultPda(context, seeds), options);
}
