/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, publicKey as publicKeySerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type BrandVault = Account<BrandVaultAccountData>;

  export type BrandVaultAccountData = { discriminator: Array<number>; launchBrandkitSupply: bigint; lifetimeBrandkitSupply: bigint; initialVestedSupply: bigint;  };

export type BrandVaultAccountDataArgs = { launchBrandkitSupply: number | bigint; lifetimeBrandkitSupply: number | bigint; initialVestedSupply: number | bigint;  };


  export function getBrandVaultAccountDataSerializer(): Serializer<BrandVaultAccountDataArgs, BrandVaultAccountData> {
  return mapSerializer<BrandVaultAccountDataArgs, any, BrandVaultAccountData>(struct<BrandVaultAccountData>([['discriminator', array(u8(), { size: 8 })], ['launchBrandkitSupply', u64()], ['lifetimeBrandkitSupply', u64()], ['initialVestedSupply', u64()]], { description: 'BrandVaultAccountData' }), (value) => ({ ...value, discriminator: [151, 78, 229, 240, 28, 131, 251, 218] }) ) as Serializer<BrandVaultAccountDataArgs, BrandVaultAccountData>;
}


export function deserializeBrandVault(rawAccount: RpcAccount): BrandVault {
  return deserializeAccount(rawAccount, getBrandVaultAccountDataSerializer());
}

export async function fetchBrandVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BrandVault> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'BrandVault');
  return deserializeBrandVault(maybeAccount);
}

export async function safeFetchBrandVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<BrandVault | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeBrandVault(maybeAccount)
    : null;
}

export async function fetchAllBrandVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BrandVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BrandVault');
    return deserializeBrandVault(maybeAccount);
  });
}

export async function safeFetchAllBrandVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<BrandVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeBrandVault(maybeAccount as RpcAccount));
}

export function getBrandVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'launchBrandkitSupply': number | bigint, 'lifetimeBrandkitSupply': number | bigint, 'initialVestedSupply': number | bigint }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'launchBrandkitSupply': [8, u64()], 'lifetimeBrandkitSupply': [16, u64()], 'initialVestedSupply': [24, u64()] })
    .deserializeUsing<BrandVault>((account) => deserializeBrandVault(account))      .whereField('discriminator', [151, 78, 229, 240, 28, 131, 251, 218])
    ;
}

export function getBrandVaultSize(): number {
  return 32;
}

export function findBrandVaultPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("brand-vault"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchBrandVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBrandVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<BrandVault> {
  return fetchBrandVault(context, findBrandVaultPda(context, seeds), options);
}

export async function safeFetchBrandVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findBrandVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<BrandVault | null> {
  return safeFetchBrandVault(context, findBrandVaultPda(context, seeds), options);
}
