/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, i64, mapSerializer, publicKey as publicKeySerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type CreatorVault = Account<CreatorVaultAccountData>;

  export type CreatorVaultAccountData = { discriminator: Array<number>; initialVestedSupply: bigint; lastDistribution: bigint;  };

export type CreatorVaultAccountDataArgs = { initialVestedSupply: number | bigint; lastDistribution: number | bigint;  };


  export function getCreatorVaultAccountDataSerializer(): Serializer<CreatorVaultAccountDataArgs, CreatorVaultAccountData> {
  return mapSerializer<CreatorVaultAccountDataArgs, any, CreatorVaultAccountData>(struct<CreatorVaultAccountData>([['discriminator', array(u8(), { size: 8 })], ['initialVestedSupply', u64()], ['lastDistribution', i64()]], { description: 'CreatorVaultAccountData' }), (value) => ({ ...value, discriminator: [200, 135, 38, 98, 35, 236, 238, 12] }) ) as Serializer<CreatorVaultAccountDataArgs, CreatorVaultAccountData>;
}


export function deserializeCreatorVault(rawAccount: RpcAccount): CreatorVault {
  return deserializeAccount(rawAccount, getCreatorVaultAccountDataSerializer());
}

export async function fetchCreatorVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<CreatorVault> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'CreatorVault');
  return deserializeCreatorVault(maybeAccount);
}

export async function safeFetchCreatorVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<CreatorVault | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeCreatorVault(maybeAccount)
    : null;
}

export async function fetchAllCreatorVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<CreatorVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'CreatorVault');
    return deserializeCreatorVault(maybeAccount);
  });
}

export async function safeFetchAllCreatorVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<CreatorVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCreatorVault(maybeAccount as RpcAccount));
}

export function getCreatorVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'initialVestedSupply': number | bigint, 'lastDistribution': number | bigint }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'initialVestedSupply': [8, u64()], 'lastDistribution': [16, i64()] })
    .deserializeUsing<CreatorVault>((account) => deserializeCreatorVault(account))      .whereField('discriminator', [200, 135, 38, 98, 35, 236, 238, 12])
    ;
}

export function getCreatorVaultSize(): number {
  return 24;
}

export function findCreatorVaultPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("creator-vault"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchCreatorVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findCreatorVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<CreatorVault> {
  return fetchCreatorVault(context, findCreatorVaultPda(context, seeds), options);
}

export async function safeFetchCreatorVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findCreatorVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<CreatorVault | null> {
  return safeFetchCreatorVault(context, findCreatorVaultPda(context, seeds), options);
}
