/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';
import { FeeRecipient, FeeRecipientArgs, getFeeRecipientSerializer } from '../types';

  
  export type FeeVault = Account<FeeVaultAccountData>;

  export type FeeVaultAccountData = { discriminator: Array<number>; totalFeesClaimed: bigint; feeRecipients: Array<FeeRecipient>;  };

export type FeeVaultAccountDataArgs = { totalFeesClaimed: number | bigint; feeRecipients: Array<FeeRecipientArgs>;  };


  export function getFeeVaultAccountDataSerializer(): Serializer<FeeVaultAccountDataArgs, FeeVaultAccountData> {
  return mapSerializer<FeeVaultAccountDataArgs, any, FeeVaultAccountData>(struct<FeeVaultAccountData>([['discriminator', array(u8(), { size: 8 })], ['totalFeesClaimed', u64()], ['feeRecipients', array(getFeeRecipientSerializer())]], { description: 'FeeVaultAccountData' }), (value) => ({ ...value, discriminator: [192, 178, 69, 232, 58, 149, 157, 132] }) ) as Serializer<FeeVaultAccountDataArgs, FeeVaultAccountData>;
}


export function deserializeFeeVault(rawAccount: RpcAccount): FeeVault {
  return deserializeAccount(rawAccount, getFeeVaultAccountDataSerializer());
}

export async function fetchFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<FeeVault> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'FeeVault');
  return deserializeFeeVault(maybeAccount);
}

export async function safeFetchFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<FeeVault | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeFeeVault(maybeAccount)
    : null;
}

export async function fetchAllFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<FeeVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FeeVault');
    return deserializeFeeVault(maybeAccount);
  });
}

export async function safeFetchAllFeeVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<FeeVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeFeeVault(maybeAccount as RpcAccount));
}

export function getFeeVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('pumpScience', 'HrxD6G1BXH4Sc1mhNxegse5rh1ZjMcetxWTGM5DfRAhZ');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'totalFeesClaimed': number | bigint, 'feeRecipients': Array<FeeRecipientArgs> }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'totalFeesClaimed': [8, u64()], 'feeRecipients': [16, array(getFeeRecipientSerializer())] })
    .deserializeUsing<FeeVault>((account) => deserializeFeeVault(account))      .whereField('discriminator', [192, 178, 69, 232, 58, 149, 157, 132])
    ;
}


export function findFeeVaultPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  ): Pda {
  const programId = context.programs.getPublicKey('pumpScience', 'HrxD6G1BXH4Sc1mhNxegse5rh1ZjMcetxWTGM5DfRAhZ');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("fee-vault"),
            ]);
}

export async function fetchFeeVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
    options?: RpcGetAccountOptions,
): Promise<FeeVault> {
  return fetchFeeVault(context, findFeeVaultPda(context), options);
}

export async function safeFetchFeeVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
    options?: RpcGetAccountOptions,
): Promise<FeeVault | null> {
  return safeFetchFeeVault(context, findFeeVaultPda(context), options);
}
