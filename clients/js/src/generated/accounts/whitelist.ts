/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, publicKey as publicKeySerializer, struct, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type Whitelist = Account<WhitelistAccountData>;

  export type WhitelistAccountData = { discriminator: Array<number>; creator: PublicKey;  };

export type WhitelistAccountDataArgs = { creator: PublicKey;  };


  export function getWhitelistAccountDataSerializer(): Serializer<WhitelistAccountDataArgs, WhitelistAccountData> {
  return mapSerializer<WhitelistAccountDataArgs, any, WhitelistAccountData>(struct<WhitelistAccountData>([['discriminator', array(u8(), { size: 8 })], ['creator', publicKeySerializer()]], { description: 'WhitelistAccountData' }), (value) => ({ ...value, discriminator: [204, 176, 52, 79, 146, 121, 54, 247] }) ) as Serializer<WhitelistAccountDataArgs, WhitelistAccountData>;
}


export function deserializeWhitelist(rawAccount: RpcAccount): Whitelist {
  return deserializeAccount(rawAccount, getWhitelistAccountDataSerializer());
}

export async function fetchWhitelist(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Whitelist> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'Whitelist');
  return deserializeWhitelist(maybeAccount);
}

export async function safeFetchWhitelist(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Whitelist | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializeWhitelist(maybeAccount)
    : null;
}

export async function fetchAllWhitelist(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Whitelist[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Whitelist');
    return deserializeWhitelist(maybeAccount);
  });
}

export async function safeFetchAllWhitelist(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Whitelist[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeWhitelist(maybeAccount as RpcAccount));
}

export function getWhitelistGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('pumpScience', '6YBhe9qr2WQN7JUxCgSPeX4puM6YihAKxdPQ5pZaSJ1h');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'creator': PublicKey }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'creator': [8, publicKeySerializer()] })
    .deserializeUsing<Whitelist>((account) => deserializeWhitelist(account))      .whereField('discriminator', [204, 176, 52, 79, 146, 121, 54, 247])
    ;
}

export function getWhitelistSize(): number {
  return 40;
}

