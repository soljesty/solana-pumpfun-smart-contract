/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions, assertAccountExists, deserializeAccount, gpaBuilder, publicKey as toPublicKey } from '@metaplex-foundation/umi';
import { Serializer, array, i64, mapSerializer, publicKey as publicKeySerializer, string, struct, u64, u8 } from '@metaplex-foundation/umi/serializers';

  
  export type PlatformVault = Account<PlatformVaultAccountData>;

  export type PlatformVaultAccountData = { discriminator: Array<number>; initialVestedSupply: bigint; lastDistribution: bigint; lastFeeWithdrawal: bigint; feesWithdrawn: bigint;  };

export type PlatformVaultAccountDataArgs = { initialVestedSupply: number | bigint; lastDistribution: number | bigint; lastFeeWithdrawal: number | bigint; feesWithdrawn: number | bigint;  };


  export function getPlatformVaultAccountDataSerializer(): Serializer<PlatformVaultAccountDataArgs, PlatformVaultAccountData> {
  return mapSerializer<PlatformVaultAccountDataArgs, any, PlatformVaultAccountData>(struct<PlatformVaultAccountData>([['discriminator', array(u8(), { size: 8 })], ['initialVestedSupply', u64()], ['lastDistribution', i64()], ['lastFeeWithdrawal', i64()], ['feesWithdrawn', u64()]], { description: 'PlatformVaultAccountData' }), (value) => ({ ...value, discriminator: [223, 22, 224, 48, 29, 125, 8, 80] }) ) as Serializer<PlatformVaultAccountDataArgs, PlatformVaultAccountData>;
}


export function deserializePlatformVault(rawAccount: RpcAccount): PlatformVault {
  return deserializeAccount(rawAccount, getPlatformVaultAccountDataSerializer());
}

export async function fetchPlatformVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PlatformVault> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, 'PlatformVault');
  return deserializePlatformVault(maybeAccount);
}

export async function safeFetchPlatformVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<PlatformVault | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists
    ? deserializePlatformVault(maybeAccount)
    : null;
}

export async function fetchAllPlatformVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PlatformVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PlatformVault');
    return deserializePlatformVault(maybeAccount);
  });
}

export async function safeFetchAllPlatformVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<PlatformVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys.map(key => toPublicKey(key, false)), options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePlatformVault(maybeAccount as RpcAccount));
}

export function getPlatformVaultGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return gpaBuilder(context, programId)
    .registerFields<{ 'discriminator': Array<number>, 'initialVestedSupply': number | bigint, 'lastDistribution': number | bigint, 'lastFeeWithdrawal': number | bigint, 'feesWithdrawn': number | bigint }>({ 'discriminator': [0, array(u8(), { size: 8 })], 'initialVestedSupply': [8, u64()], 'lastDistribution': [16, i64()], 'lastFeeWithdrawal': [24, i64()], 'feesWithdrawn': [32, u64()] })
    .deserializeUsing<PlatformVault>((account) => deserializePlatformVault(account))      .whereField('discriminator', [223, 22, 224, 48, 29, 125, 8, 80])
    ;
}

export function getPlatformVaultSize(): number {
  return 40;
}

export function findPlatformVaultPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
      seeds: {
                                      /** The mint of the bonding curve tkn */
          mint: PublicKey;
                  }
  ): Pda {
  const programId = context.programs.getPublicKey('pumpScience', 'EtZR9gh25YUM6LkL2o2yYV1KzyuDdftHvYk3wsb2Ypkj');
  return context.eddsa.findPda(programId, [
                  string({ size: 'variable' }).serialize("platform-vault"),
                        publicKeySerializer().serialize(seeds.mint),
            ]);
}

export async function fetchPlatformVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPlatformVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PlatformVault> {
  return fetchPlatformVault(context, findPlatformVaultPda(context, seeds), options);
}

export async function safeFetchPlatformVaultFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
      seeds: Parameters<typeof findPlatformVaultPda>[1],
    options?: RpcGetAccountOptions,
): Promise<PlatformVault | null> {
  return safeFetchPlatformVault(context, findPlatformVaultPda(context, seeds), options);
}
