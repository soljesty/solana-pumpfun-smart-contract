/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidGlobalAuthority: Invalid Global Authority */
export class PsInvalidGlobalAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidGlobalAuthority';

  readonly code: number = 0x1770; // 6000
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Global Authority', program, cause);
  }
}
codeToErrorMap.set(0x1770, PsInvalidGlobalAuthorityError);
nameToErrorMap.set('InvalidGlobalAuthority', PsInvalidGlobalAuthorityError);

/** InvalidWithdrawAuthority: Invalid Withdraw Authority */
export class PsInvalidWithdrawAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidWithdrawAuthority';

  readonly code: number = 0x1771; // 6001
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Withdraw Authority', program, cause);
  }
}
codeToErrorMap.set(0x1771, PsInvalidWithdrawAuthorityError);
nameToErrorMap.set('InvalidWithdrawAuthority', PsInvalidWithdrawAuthorityError);

/** InvalidArgument: Invalid Argument */
export class PsInvalidArgumentError extends ProgramError {
  override readonly name: string = 'InvalidArgument';

  readonly code: number = 0x1772; // 6002
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Argument', program, cause);
  }
}
codeToErrorMap.set(0x1772, PsInvalidArgumentError);
nameToErrorMap.set('InvalidArgument', PsInvalidArgumentError);

/** AlreadyInitialized: Global Already Initialized */
export class PsAlreadyInitializedError extends ProgramError {
  override readonly name: string = 'AlreadyInitialized';

  readonly code: number = 0x1773; // 6003
  
  constructor(program: Program, cause?: Error) {
    super('Global Already Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1773, PsAlreadyInitializedError);
nameToErrorMap.set('AlreadyInitialized', PsAlreadyInitializedError);

/** NotInitialized: Global Not Initialized */
export class PsNotInitializedError extends ProgramError {
  override readonly name: string = 'NotInitialized';

  readonly code: number = 0x1774; // 6004
  
  constructor(program: Program, cause?: Error) {
    super('Global Not Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1774, PsNotInitializedError);
nameToErrorMap.set('NotInitialized', PsNotInitializedError);

/** ProgramNotRunning: Not in Running State */
export class PsProgramNotRunningError extends ProgramError {
  override readonly name: string = 'ProgramNotRunning';

  readonly code: number = 0x1775; // 6005
  
  constructor(program: Program, cause?: Error) {
    super('Not in Running State', program, cause);
  }
}
codeToErrorMap.set(0x1775, PsProgramNotRunningError);
nameToErrorMap.set('ProgramNotRunning', PsProgramNotRunningError);

/** BondingCurveComplete: Bonding Curve Complete */
export class PsBondingCurveCompleteError extends ProgramError {
  override readonly name: string = 'BondingCurveComplete';

  readonly code: number = 0x1776; // 6006
  
  constructor(program: Program, cause?: Error) {
    super('Bonding Curve Complete', program, cause);
  }
}
codeToErrorMap.set(0x1776, PsBondingCurveCompleteError);
nameToErrorMap.set('BondingCurveComplete', PsBondingCurveCompleteError);

/** BondingCurveNotComplete: Bonding Curve Not Complete */
export class PsBondingCurveNotCompleteError extends ProgramError {
  override readonly name: string = 'BondingCurveNotComplete';

  readonly code: number = 0x1777; // 6007
  
  constructor(program: Program, cause?: Error) {
    super('Bonding Curve Not Complete', program, cause);
  }
}
codeToErrorMap.set(0x1777, PsBondingCurveNotCompleteError);
nameToErrorMap.set('BondingCurveNotComplete', PsBondingCurveNotCompleteError);

/** InsufficientUserTokens: Insufficient User Tokens */
export class PsInsufficientUserTokensError extends ProgramError {
  override readonly name: string = 'InsufficientUserTokens';

  readonly code: number = 0x1778; // 6008
  
  constructor(program: Program, cause?: Error) {
    super('Insufficient User Tokens', program, cause);
  }
}
codeToErrorMap.set(0x1778, PsInsufficientUserTokensError);
nameToErrorMap.set('InsufficientUserTokens', PsInsufficientUserTokensError);

/** InsufficientCurveTokens: Insufficient Curve Tokens */
export class PsInsufficientCurveTokensError extends ProgramError {
  override readonly name: string = 'InsufficientCurveTokens';

  readonly code: number = 0x1779; // 6009
  
  constructor(program: Program, cause?: Error) {
    super('Insufficient Curve Tokens', program, cause);
  }
}
codeToErrorMap.set(0x1779, PsInsufficientCurveTokensError);
nameToErrorMap.set('InsufficientCurveTokens', PsInsufficientCurveTokensError);

/** InsufficientUserSOL: Insufficient user SOL */
export class PsInsufficientUserSOLError extends ProgramError {
  override readonly name: string = 'InsufficientUserSOL';

  readonly code: number = 0x177a; // 6010
  
  constructor(program: Program, cause?: Error) {
    super('Insufficient user SOL', program, cause);
  }
}
codeToErrorMap.set(0x177a, PsInsufficientUserSOLError);
nameToErrorMap.set('InsufficientUserSOL', PsInsufficientUserSOLError);

/** SlippageExceeded: Slippage Exceeded */
export class PsSlippageExceededError extends ProgramError {
  override readonly name: string = 'SlippageExceeded';

  readonly code: number = 0x177b; // 6011
  
  constructor(program: Program, cause?: Error) {
    super('Slippage Exceeded', program, cause);
  }
}
codeToErrorMap.set(0x177b, PsSlippageExceededError);
nameToErrorMap.set('SlippageExceeded', PsSlippageExceededError);

/** MinSwap: Swap exactInAmount is 0 */
export class PsMinSwapError extends ProgramError {
  override readonly name: string = 'MinSwap';

  readonly code: number = 0x177c; // 6012
  
  constructor(program: Program, cause?: Error) {
    super('Swap exactInAmount is 0', program, cause);
  }
}
codeToErrorMap.set(0x177c, PsMinSwapError);
nameToErrorMap.set('MinSwap', PsMinSwapError);

/** BuyFailed: Buy Failed */
export class PsBuyFailedError extends ProgramError {
  override readonly name: string = 'BuyFailed';

  readonly code: number = 0x177d; // 6013
  
  constructor(program: Program, cause?: Error) {
    super('Buy Failed', program, cause);
  }
}
codeToErrorMap.set(0x177d, PsBuyFailedError);
nameToErrorMap.set('BuyFailed', PsBuyFailedError);

/** SellFailed: Sell Failed */
export class PsSellFailedError extends ProgramError {
  override readonly name: string = 'SellFailed';

  readonly code: number = 0x177e; // 6014
  
  constructor(program: Program, cause?: Error) {
    super('Sell Failed', program, cause);
  }
}
codeToErrorMap.set(0x177e, PsSellFailedError);
nameToErrorMap.set('SellFailed', PsSellFailedError);

/** BondingCurveInvariant: Bonding Curve Invariant Failed */
export class PsBondingCurveInvariantError extends ProgramError {
  override readonly name: string = 'BondingCurveInvariant';

  readonly code: number = 0x177f; // 6015
  
  constructor(program: Program, cause?: Error) {
    super('Bonding Curve Invariant Failed', program, cause);
  }
}
codeToErrorMap.set(0x177f, PsBondingCurveInvariantError);
nameToErrorMap.set('BondingCurveInvariant', PsBondingCurveInvariantError);

/** CurveNotStarted: Curve Not Started */
export class PsCurveNotStartedError extends ProgramError {
  override readonly name: string = 'CurveNotStarted';

  readonly code: number = 0x1780; // 6016
  
  constructor(program: Program, cause?: Error) {
    super('Curve Not Started', program, cause);
  }
}
codeToErrorMap.set(0x1780, PsCurveNotStartedError);
nameToErrorMap.set('CurveNotStarted', PsCurveNotStartedError);

/** InvalidAllocation: Invalid Allocation Data supplied, basis points must add up to 10000 */
export class PsInvalidAllocationError extends ProgramError {
  override readonly name: string = 'InvalidAllocation';

  readonly code: number = 0x1781; // 6017
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Allocation Data supplied, basis points must add up to 10000', program, cause);
  }
}
codeToErrorMap.set(0x1781, PsInvalidAllocationError);
nameToErrorMap.set('InvalidAllocation', PsInvalidAllocationError);

/** InvalidStartTime: Start time is in the past */
export class PsInvalidStartTimeError extends ProgramError {
  override readonly name: string = 'InvalidStartTime';

  readonly code: number = 0x1782; // 6018
  
  constructor(program: Program, cause?: Error) {
    super('Start time is in the past', program, cause);
  }
}
codeToErrorMap.set(0x1782, PsInvalidStartTimeError);
nameToErrorMap.set('InvalidStartTime', PsInvalidStartTimeError);

/** SOLLaunchThresholdTooHigh: SOL Launch threshold not attainable even if all tokens are sold */
export class PsSOLLaunchThresholdTooHighError extends ProgramError {
  override readonly name: string = 'SOLLaunchThresholdTooHigh';

  readonly code: number = 0x1783; // 6019
  
  constructor(program: Program, cause?: Error) {
    super('SOL Launch threshold not attainable even if all tokens are sold', program, cause);
  }
}
codeToErrorMap.set(0x1783, PsSOLLaunchThresholdTooHighError);
nameToErrorMap.set('SOLLaunchThresholdTooHigh', PsSOLLaunchThresholdTooHighError);

/** NoMaxAttainableSOL: Cannot compute max_attainable_sol */
export class PsNoMaxAttainableSOLError extends ProgramError {
  override readonly name: string = 'NoMaxAttainableSOL';

  readonly code: number = 0x1784; // 6020
  
  constructor(program: Program, cause?: Error) {
    super('Cannot compute max_attainable_sol', program, cause);
  }
}
codeToErrorMap.set(0x1784, PsNoMaxAttainableSOLError);
nameToErrorMap.set('NoMaxAttainableSOL', PsNoMaxAttainableSOLError);

/** InvalidCreatorAuthority: Invalid Creator Authority */
export class PsInvalidCreatorAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidCreatorAuthority';

  readonly code: number = 0x1785; // 6021
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Creator Authority', program, cause);
  }
}
codeToErrorMap.set(0x1785, PsInvalidCreatorAuthorityError);
nameToErrorMap.set('InvalidCreatorAuthority', PsInvalidCreatorAuthorityError);

/** CliffNotReached: Cliff not yet reached */
export class PsCliffNotReachedError extends ProgramError {
  override readonly name: string = 'CliffNotReached';

  readonly code: number = 0x1786; // 6022
  
  constructor(program: Program, cause?: Error) {
    super('Cliff not yet reached', program, cause);
  }
}
codeToErrorMap.set(0x1786, PsCliffNotReachedError);
nameToErrorMap.set('CliffNotReached', PsCliffNotReachedError);

/** VestingPeriodNotOver: Vesting period not yet over */
export class PsVestingPeriodNotOverError extends ProgramError {
  override readonly name: string = 'VestingPeriodNotOver';

  readonly code: number = 0x1787; // 6023
  
  constructor(program: Program, cause?: Error) {
    super('Vesting period not yet over', program, cause);
  }
}
codeToErrorMap.set(0x1787, PsVestingPeriodNotOverError);
nameToErrorMap.set('VestingPeriodNotOver', PsVestingPeriodNotOverError);

/** NoFeesToWithdraw: Not enough fees to withdraw */
export class PsNoFeesToWithdrawError extends ProgramError {
  override readonly name: string = 'NoFeesToWithdraw';

  readonly code: number = 0x1788; // 6024
  
  constructor(program: Program, cause?: Error) {
    super('Not enough fees to withdraw', program, cause);
  }
}
codeToErrorMap.set(0x1788, PsNoFeesToWithdrawError);
nameToErrorMap.set('NoFeesToWithdraw', PsNoFeesToWithdrawError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getPumpScienceErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getPumpScienceErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
