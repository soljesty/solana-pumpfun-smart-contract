/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidGlobalAuthority: Invalid Global Authority */
export class PsInvalidGlobalAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidGlobalAuthority';

  readonly code: number = 0x1770; // 6000
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Global Authority', program, cause);
  }
}
codeToErrorMap.set(0x1770, PsInvalidGlobalAuthorityError);
nameToErrorMap.set('InvalidGlobalAuthority', PsInvalidGlobalAuthorityError);

/** InvalidWithdrawAuthority: Invalid Withdraw Authority */
export class PsInvalidWithdrawAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidWithdrawAuthority';

  readonly code: number = 0x1771; // 6001
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Withdraw Authority', program, cause);
  }
}
codeToErrorMap.set(0x1771, PsInvalidWithdrawAuthorityError);
nameToErrorMap.set('InvalidWithdrawAuthority', PsInvalidWithdrawAuthorityError);

/** InvalidArgument: Invalid Argument */
export class PsInvalidArgumentError extends ProgramError {
  override readonly name: string = 'InvalidArgument';

  readonly code: number = 0x1772; // 6002
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Argument', program, cause);
  }
}
codeToErrorMap.set(0x1772, PsInvalidArgumentError);
nameToErrorMap.set('InvalidArgument', PsInvalidArgumentError);

/** AlreadyInitialized: Global Already Initialized */
export class PsAlreadyInitializedError extends ProgramError {
  override readonly name: string = 'AlreadyInitialized';

  readonly code: number = 0x1773; // 6003
  
  constructor(program: Program, cause?: Error) {
    super('Global Already Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1773, PsAlreadyInitializedError);
nameToErrorMap.set('AlreadyInitialized', PsAlreadyInitializedError);

/** NotInitialized: Global Not Initialized */
export class PsNotInitializedError extends ProgramError {
  override readonly name: string = 'NotInitialized';

  readonly code: number = 0x1774; // 6004
  
  constructor(program: Program, cause?: Error) {
    super('Global Not Initialized', program, cause);
  }
}
codeToErrorMap.set(0x1774, PsNotInitializedError);
nameToErrorMap.set('NotInitialized', PsNotInitializedError);

/** ProgramNotRunning: Not in Running State */
export class PsProgramNotRunningError extends ProgramError {
  override readonly name: string = 'ProgramNotRunning';

  readonly code: number = 0x1775; // 6005
  
  constructor(program: Program, cause?: Error) {
    super('Not in Running State', program, cause);
  }
}
codeToErrorMap.set(0x1775, PsProgramNotRunningError);
nameToErrorMap.set('ProgramNotRunning', PsProgramNotRunningError);

/** BondingCurveComplete: Bonding Curve Complete */
export class PsBondingCurveCompleteError extends ProgramError {
  override readonly name: string = 'BondingCurveComplete';

  readonly code: number = 0x1776; // 6006
  
  constructor(program: Program, cause?: Error) {
    super('Bonding Curve Complete', program, cause);
  }
}
codeToErrorMap.set(0x1776, PsBondingCurveCompleteError);
nameToErrorMap.set('BondingCurveComplete', PsBondingCurveCompleteError);

/** BondingCurveNotComplete: Bonding Curve Not Complete */
export class PsBondingCurveNotCompleteError extends ProgramError {
  override readonly name: string = 'BondingCurveNotComplete';

  readonly code: number = 0x1777; // 6007
  
  constructor(program: Program, cause?: Error) {
    super('Bonding Curve Not Complete', program, cause);
  }
}
codeToErrorMap.set(0x1777, PsBondingCurveNotCompleteError);
nameToErrorMap.set('BondingCurveNotComplete', PsBondingCurveNotCompleteError);

/** InsufficientUserTokens: Insufficient User Tokens */
export class PsInsufficientUserTokensError extends ProgramError {
  override readonly name: string = 'InsufficientUserTokens';

  readonly code: number = 0x1778; // 6008
  
  constructor(program: Program, cause?: Error) {
    super('Insufficient User Tokens', program, cause);
  }
}
codeToErrorMap.set(0x1778, PsInsufficientUserTokensError);
nameToErrorMap.set('InsufficientUserTokens', PsInsufficientUserTokensError);

/** InsufficientUserSOL: Insufficient user SOL */
export class PsInsufficientUserSOLError extends ProgramError {
  override readonly name: string = 'InsufficientUserSOL';

  readonly code: number = 0x1779; // 6009
  
  constructor(program: Program, cause?: Error) {
    super('Insufficient user SOL', program, cause);
  }
}
codeToErrorMap.set(0x1779, PsInsufficientUserSOLError);
nameToErrorMap.set('InsufficientUserSOL', PsInsufficientUserSOLError);

/** SlippageExceeded: Slippage Exceeded */
export class PsSlippageExceededError extends ProgramError {
  override readonly name: string = 'SlippageExceeded';

  readonly code: number = 0x177a; // 6010
  
  constructor(program: Program, cause?: Error) {
    super('Slippage Exceeded', program, cause);
  }
}
codeToErrorMap.set(0x177a, PsSlippageExceededError);
nameToErrorMap.set('SlippageExceeded', PsSlippageExceededError);

/** MinSwap: Swap exactInAmount is 0 */
export class PsMinSwapError extends ProgramError {
  override readonly name: string = 'MinSwap';

  readonly code: number = 0x177b; // 6011
  
  constructor(program: Program, cause?: Error) {
    super('Swap exactInAmount is 0', program, cause);
  }
}
codeToErrorMap.set(0x177b, PsMinSwapError);
nameToErrorMap.set('MinSwap', PsMinSwapError);

/** BuyFailed: Buy Failed */
export class PsBuyFailedError extends ProgramError {
  override readonly name: string = 'BuyFailed';

  readonly code: number = 0x177c; // 6012
  
  constructor(program: Program, cause?: Error) {
    super('Buy Failed', program, cause);
  }
}
codeToErrorMap.set(0x177c, PsBuyFailedError);
nameToErrorMap.set('BuyFailed', PsBuyFailedError);

/** SellFailed: Sell Failed */
export class PsSellFailedError extends ProgramError {
  override readonly name: string = 'SellFailed';

  readonly code: number = 0x177d; // 6013
  
  constructor(program: Program, cause?: Error) {
    super('Sell Failed', program, cause);
  }
}
codeToErrorMap.set(0x177d, PsSellFailedError);
nameToErrorMap.set('SellFailed', PsSellFailedError);

/** BondingCurveInvariant: Bonding Curve Invariant Failed */
export class PsBondingCurveInvariantError extends ProgramError {
  override readonly name: string = 'BondingCurveInvariant';

  readonly code: number = 0x177e; // 6014
  
  constructor(program: Program, cause?: Error) {
    super('Bonding Curve Invariant Failed', program, cause);
  }
}
codeToErrorMap.set(0x177e, PsBondingCurveInvariantError);
nameToErrorMap.set('BondingCurveInvariant', PsBondingCurveInvariantError);

/** CurveNotStarted: Curve Not Started */
export class PsCurveNotStartedError extends ProgramError {
  override readonly name: string = 'CurveNotStarted';

  readonly code: number = 0x177f; // 6015
  
  constructor(program: Program, cause?: Error) {
    super('Curve Not Started', program, cause);
  }
}
codeToErrorMap.set(0x177f, PsCurveNotStartedError);
nameToErrorMap.set('CurveNotStarted', PsCurveNotStartedError);

/** InvalidStartTime: Start time is in the past */
export class PsInvalidStartTimeError extends ProgramError {
  override readonly name: string = 'InvalidStartTime';

  readonly code: number = 0x1780; // 6016
  
  constructor(program: Program, cause?: Error) {
    super('Start time is in the past', program, cause);
  }
}
codeToErrorMap.set(0x1780, PsInvalidStartTimeError);
nameToErrorMap.set('InvalidStartTime', PsInvalidStartTimeError);

/** WlInitializeFailed: Whitelist is already initialized */
export class PsWlInitializeFailedError extends ProgramError {
  override readonly name: string = 'WlInitializeFailed';

  readonly code: number = 0x1781; // 6017
  
  constructor(program: Program, cause?: Error) {
    super('Whitelist is already initialized', program, cause);
  }
}
codeToErrorMap.set(0x1781, PsWlInitializeFailedError);
nameToErrorMap.set('WlInitializeFailed', PsWlInitializeFailedError);

/** WlNotInitializeFailed: Whitelist is not initialized */
export class PsWlNotInitializeFailedError extends ProgramError {
  override readonly name: string = 'WlNotInitializeFailed';

  readonly code: number = 0x1782; // 6018
  
  constructor(program: Program, cause?: Error) {
    super('Whitelist is not initialized', program, cause);
  }
}
codeToErrorMap.set(0x1782, PsWlNotInitializeFailedError);
nameToErrorMap.set('WlNotInitializeFailed', PsWlNotInitializeFailedError);

/** AddFailed: This creator already in whitelist */
export class PsAddFailedError extends ProgramError {
  override readonly name: string = 'AddFailed';

  readonly code: number = 0x1783; // 6019
  
  constructor(program: Program, cause?: Error) {
    super('This creator already in whitelist', program, cause);
  }
}
codeToErrorMap.set(0x1783, PsAddFailedError);
nameToErrorMap.set('AddFailed', PsAddFailedError);

/** RemoveFailed: This creator is not in whitelist */
export class PsRemoveFailedError extends ProgramError {
  override readonly name: string = 'RemoveFailed';

  readonly code: number = 0x1784; // 6020
  
  constructor(program: Program, cause?: Error) {
    super('This creator is not in whitelist', program, cause);
  }
}
codeToErrorMap.set(0x1784, PsRemoveFailedError);
nameToErrorMap.set('RemoveFailed', PsRemoveFailedError);

/** WlNotInitialized: The WL account is not initialized */
export class PsWlNotInitializedError extends ProgramError {
  override readonly name: string = 'WlNotInitialized';

  readonly code: number = 0x1785; // 6021
  
  constructor(program: Program, cause?: Error) {
    super('The WL account is not initialized', program, cause);
  }
}
codeToErrorMap.set(0x1785, PsWlNotInitializedError);
nameToErrorMap.set('WlNotInitialized', PsWlNotInitializedError);

/** NotWhiteList: This creator is not in whitelist */
export class PsNotWhiteListError extends ProgramError {
  override readonly name: string = 'NotWhiteList';

  readonly code: number = 0x1786; // 6022
  
  constructor(program: Program, cause?: Error) {
    super('This creator is not in whitelist', program, cause);
  }
}
codeToErrorMap.set(0x1786, PsNotWhiteListError);
nameToErrorMap.set('NotWhiteList', PsNotWhiteListError);

/** NotCompleted: Bonding curve is not completed */
export class PsNotCompletedError extends ProgramError {
  override readonly name: string = 'NotCompleted';

  readonly code: number = 0x1787; // 6023
  
  constructor(program: Program, cause?: Error) {
    super('Bonding curve is not completed', program, cause);
  }
}
codeToErrorMap.set(0x1787, PsNotCompletedError);
nameToErrorMap.set('NotCompleted', PsNotCompletedError);

/** NotBondingCurveMint: This token is not a bonding curve token */
export class PsNotBondingCurveMintError extends ProgramError {
  override readonly name: string = 'NotBondingCurveMint';

  readonly code: number = 0x1788; // 6024
  
  constructor(program: Program, cause?: Error) {
    super('This token is not a bonding curve token', program, cause);
  }
}
codeToErrorMap.set(0x1788, PsNotBondingCurveMintError);
nameToErrorMap.set('NotBondingCurveMint', PsNotBondingCurveMintError);

/** NotSOL: Not quote mint */
export class PsNotSOLError extends ProgramError {
  override readonly name: string = 'NotSOL';

  readonly code: number = 0x1789; // 6025
  
  constructor(program: Program, cause?: Error) {
    super('Not quote mint', program, cause);
  }
}
codeToErrorMap.set(0x1789, PsNotSOLError);
nameToErrorMap.set('NotSOL', PsNotSOLError);

/** InvalidConfig: Not equel config */
export class PsInvalidConfigError extends ProgramError {
  override readonly name: string = 'InvalidConfig';

  readonly code: number = 0x178a; // 6026
  
  constructor(program: Program, cause?: Error) {
    super('Not equel config', program, cause);
  }
}
codeToErrorMap.set(0x178a, PsInvalidConfigError);
nameToErrorMap.set('InvalidConfig', PsInvalidConfigError);

/** ArithmeticError: Arithmetic Error */
export class PsArithmeticErrorError extends ProgramError {
  override readonly name: string = 'ArithmeticError';

  readonly code: number = 0x178b; // 6027
  
  constructor(program: Program, cause?: Error) {
    super('Arithmetic Error', program, cause);
  }
}
codeToErrorMap.set(0x178b, PsArithmeticErrorError);
nameToErrorMap.set('ArithmeticError', PsArithmeticErrorError);

/** InvalidFeeReceiver: Invalid Fee Receiver */
export class PsInvalidFeeReceiverError extends ProgramError {
  override readonly name: string = 'InvalidFeeReceiver';

  readonly code: number = 0x178c; // 6028
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Fee Receiver', program, cause);
  }
}
codeToErrorMap.set(0x178c, PsInvalidFeeReceiverError);
nameToErrorMap.set('InvalidFeeReceiver', PsInvalidFeeReceiverError);

/** InvalidMigrationAuthority: Invalid Migration Authority */
export class PsInvalidMigrationAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidMigrationAuthority';

  readonly code: number = 0x178d; // 6029
  
  constructor(program: Program, cause?: Error) {
    super('Invalid Migration Authority', program, cause);
  }
}
codeToErrorMap.set(0x178d, PsInvalidMigrationAuthorityError);
nameToErrorMap.set('InvalidMigrationAuthority', PsInvalidMigrationAuthorityError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getPumpScienceErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getPumpScienceErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
