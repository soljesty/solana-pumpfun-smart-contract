/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Context, Pda, PublicKey, Signer, TransactionBuilder, transactionBuilder } from '@metaplex-foundation/umi';
import { Serializer, array, mapSerializer, publicKey as publicKeySerializer, struct, u8 } from '@metaplex-foundation/umi/serializers';
import { ResolvedAccount, ResolvedAccountsWithIndices, getAccountMetasAndSigners } from '../shared';

// Accounts.
export type AddWlInstructionAccounts = {
    global: PublicKey | Pda;
    whitelist: PublicKey | Pda;
    admin: Signer;
    systemProgram?: PublicKey | Pda;
};

  // Data.
  export type AddWlInstructionData = { discriminator: Array<number>; newCreator: PublicKey;  };

export type AddWlInstructionDataArgs = { newCreator: PublicKey;  };


  export function getAddWlInstructionDataSerializer(): Serializer<AddWlInstructionDataArgs, AddWlInstructionData> {
  return mapSerializer<AddWlInstructionDataArgs, any, AddWlInstructionData>(struct<AddWlInstructionData>([['discriminator', array(u8(), { size: 8 })], ['newCreator', publicKeySerializer()]], { description: 'AddWlInstructionData' }), (value) => ({ ...value, discriminator: [191, 132, 118, 119, 113, 82, 255, 138] }) ) as Serializer<AddWlInstructionDataArgs, AddWlInstructionData>;
}



  
  // Args.
      export type AddWlInstructionArgs =           AddWlInstructionDataArgs
      ;
  
// Instruction.
export function addWl(
  context: Pick<Context, "programs">,
                        input: AddWlInstructionAccounts & AddWlInstructionArgs,
      ): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('pumpScience', '6YBhe9qr2WQN7JUxCgSPeX4puM6YihAKxdPQ5pZaSJ1h');

  // Accounts.
  const resolvedAccounts = {
          global: { index: 0, isWritable: true as boolean, value: input.global ?? null },
          whitelist: { index: 1, isWritable: true as boolean, value: input.whitelist ?? null },
          admin: { index: 2, isWritable: true as boolean, value: input.admin ?? null },
          systemProgram: { index: 3, isWritable: false as boolean, value: input.systemProgram ?? null },
      } satisfies ResolvedAccountsWithIndices;

      // Arguments.
    const resolvedArgs: AddWlInstructionArgs = { ...input };
  
    // Default values.
  if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
resolvedAccounts.systemProgram.isWritable = false
      }
      
  // Accounts in order.
      const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a,b) => a.index - b.index);
  
  
  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
      const data = getAddWlInstructionDataSerializer().serialize(resolvedArgs as AddWlInstructionDataArgs);
  
  // Bytes Created On Chain.
      const bytesCreatedOnChain = 0;
  
  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
